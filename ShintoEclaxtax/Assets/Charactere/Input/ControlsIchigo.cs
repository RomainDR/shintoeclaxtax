//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Charactere/Input/ControlsIchigo.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControlsIchigo: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControlsIchigo()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControlsIchigo"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""41f090e8-03dc-47ed-8e13-641874058aff"",
            ""actions"": [
                {
                    ""name"": ""Forward"",
                    ""type"": ""Value"",
                    ""id"": ""f3d91a81-837a-456e-85cb-893f7aa0e9b7"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""c6b8e59d-8d02-450f-a3d0-4322a3b9d0d8"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""dc0e9617-2c24-4348-90e7-ee4499d018be"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3380b1e8-6304-4ff6-9a16-6e4fa9aa4731"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5ed6f27b-42fb-4eb5-ab38-d9ceea13e97b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""10feab0a-61cd-4caa-a3fa-4f94867615ea"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""3cb55222-22f9-4ee3-8ccd-f5170b7a486c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""417aaa31-625f-451d-83d5-28df784da9b3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Bombe"",
            ""id"": ""90a9d20a-4cce-4993-9864-9f97f7af7d88"",
            ""actions"": [
                {
                    ""name"": ""SpawnBomb"",
                    ""type"": ""Button"",
                    ""id"": ""1a82621e-31a4-47f3-8069-ccc224f23d56"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""081a1f15-ba2c-4f3f-b9ad-b05aad96f7b5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpawnBomb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Forward = m_Movement.FindAction("Forward", throwIfNotFound: true);
        // Bombe
        m_Bombe = asset.FindActionMap("Bombe", throwIfNotFound: true);
        m_Bombe_SpawnBomb = m_Bombe.FindAction("SpawnBomb", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_Forward;
    public struct MovementActions
    {
        private @ControlsIchigo m_Wrapper;
        public MovementActions(@ControlsIchigo wrapper) { m_Wrapper = wrapper; }
        public InputAction @Forward => m_Wrapper.m_Movement_Forward;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @Forward.started += instance.OnForward;
            @Forward.performed += instance.OnForward;
            @Forward.canceled += instance.OnForward;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @Forward.started -= instance.OnForward;
            @Forward.performed -= instance.OnForward;
            @Forward.canceled -= instance.OnForward;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Bombe
    private readonly InputActionMap m_Bombe;
    private List<IBombeActions> m_BombeActionsCallbackInterfaces = new List<IBombeActions>();
    private readonly InputAction m_Bombe_SpawnBomb;
    public struct BombeActions
    {
        private @ControlsIchigo m_Wrapper;
        public BombeActions(@ControlsIchigo wrapper) { m_Wrapper = wrapper; }
        public InputAction @SpawnBomb => m_Wrapper.m_Bombe_SpawnBomb;
        public InputActionMap Get() { return m_Wrapper.m_Bombe; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BombeActions set) { return set.Get(); }
        public void AddCallbacks(IBombeActions instance)
        {
            if (instance == null || m_Wrapper.m_BombeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BombeActionsCallbackInterfaces.Add(instance);
            @SpawnBomb.started += instance.OnSpawnBomb;
            @SpawnBomb.performed += instance.OnSpawnBomb;
            @SpawnBomb.canceled += instance.OnSpawnBomb;
        }

        private void UnregisterCallbacks(IBombeActions instance)
        {
            @SpawnBomb.started -= instance.OnSpawnBomb;
            @SpawnBomb.performed -= instance.OnSpawnBomb;
            @SpawnBomb.canceled -= instance.OnSpawnBomb;
        }

        public void RemoveCallbacks(IBombeActions instance)
        {
            if (m_Wrapper.m_BombeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBombeActions instance)
        {
            foreach (var item in m_Wrapper.m_BombeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BombeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BombeActions @Bombe => new BombeActions(this);
    public interface IMovementActions
    {
        void OnForward(InputAction.CallbackContext context);
    }
    public interface IBombeActions
    {
        void OnSpawnBomb(InputAction.CallbackContext context);
    }
}
